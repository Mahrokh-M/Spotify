----CREATE TABLE Users (
----    user_id INT PRIMARY KEY IDENTITY,
----    username VARCHAR(50) NOT NULL,
----    [password] VARCHAR(50) NOT NULL,
----    email VARCHAR(100) NOT NULL,
----    birth_date DATE,
----    [location] VARCHAR(100)
----);
----CREATE TABLE Premium(
----    user_id INT PRIMARY KEY,  
----	Start_time DATETIME,
----	End_time DATETIME,
----	FOREIGN KEY (user_id) REFERENCES Users(user_id)
----);
----CREATE TABLE Play_list(
----    user_id INT ,
----	[name] VARCHAR(50) NOT NULL ,
----    ispublic BIT DEFAULT 0,
----	address_of_picture VARCHAR(200),
----    FOREIGN KEY (user_id) REFERENCES Users(user_id),
----	PRIMARY KEY(user_id,[name])
----);
----CREATE TABLE Digital_wallet (
----    Digital_wallet_id INT PRIMARY KEY IDENTITY,
----    user_id INT,
----    amount DECIMAL(10, 2) DEFAULT 0.00 NOT NULL,
----    FOREIGN KEY (user_id) REFERENCES Users(user_id)
----);
----CREATE TABLE Artists (
----    artist_id INT PRIMARY KEY,
----    bio VARCHAR(MAX),
----    FOREIGN KEY (artist_id) REFERENCES Users(user_id)
----);
----CREATE TABLE Albums (
----   album_id INT PRIMARY KEY IDENTITY,
----  title VARCHAR(100) NOT NULL,
----  artist_id_added INT,
----   genre VARCHAR(50),
----   release_date DATE,
----  Age_category CHAR(2),
----  country VARCHAR(50),
----  address_of_picture VARCHAR(200),
----  FOREIGN KEY (artist_id_added) REFERENCES Artists(artist_id)
----);
----CREATE TABLE Songs (
----    song_id INT PRIMARY KEY IDENTITY,
----	artist_id_added INT,
----	title VARCHAR(100)  NOT NULL,
----	album_id INT NULL,
----    genre VARCHAR(50),
----    release_date DATE,
----    lyrics VARCHAR(MAX),
----	Age_category CHAR(2),
----	country VARCHAR(50),
----	address_of_picture VARCHAR(200),
----    can_be_added BIT DEFAULT 0,
----	FOREIGN KEY (album_id) REFERENCES Albums(album_id)ON DELETE CASCADE,
----	FOREIGN KEY (artist_id_added) REFERENCES Artists(artist_id)
----);
----CREATE TABLE Concerts (
----    artist_id INT ,
----    [location] VARCHAR(100),
----    [date] DATETIME ,
----    cancel BIT  DEFAULT 0, --laghv nist
----	address_of_picture VARCHAR(200),
----    FOREIGN KEY (artist_id) REFERENCES Artists(artist_id),
----	PRIMARY KEY (artist_id,[date])
----);
----CREATE TABLE Tickets (
----    ticket_id INT PRIMARY KEY IDENTITY,
----    user_id INT,
----	artist_id INT,
----	price DECIMAL(10, 2),
----    Expiration BIT DEFAULT 0,-- 1
----	is_sold BIT DEFAULT 0,-- 0 
----	date_concert DATETIME ,--**
----    FOREIGN KEY (user_id) REFERENCES Users(user_id),
----	FOREIGN KEY (artist_id,date_concert) REFERENCES Concerts(artist_id,[date])
----);
----CREATE TABLE Favorite_Play_list(
----    user_id INT,
----	user_id_owner INT,
----    [name] VARCHAR(50) NOT NULL,
----    FOREIGN KEY (user_id) REFERENCES Premium(user_id),
----    FOREIGN KEY (user_id_owner, [name]) REFERENCES Play_list(user_id, [name]),
----    PRIMARY KEY (user_id_owner,user_id, [name])
----);
----CREATE TABLE Comment_Play_list(
----    user_id INT ,
----	[name] VARCHAR(50) NOT NULL ,
----	[text] VARCHAR(100),
----    FOREIGN KEY (user_id) REFERENCES Premium(user_id),
----	FOREIGN KEY (user_id, [name]) REFERENCES Play_list(user_id, [name]),
----	PRIMARY KEY (user_id,[name])
----);
----CREATE TABLE Like_Play_list(
----    user_id INT ,
----	[name] VARCHAR(50) NOT NULL,
----    FOREIGN KEY (user_id) REFERENCES Premium(user_id),
----	FOREIGN KEY (user_id, [name]) REFERENCES Play_list(user_id, [name]),
----	PRIMARY KEY(user_id,[name])
----);
----CREATE TABLE Friend(
----    user_id1 INT,
----	user_id2 INT,
----	accept BIT DEFAULT 0,
----    FOREIGN KEY (user_id1) REFERENCES Premium(user_id),
----	FOREIGN KEY (user_id2) REFERENCES Premium(user_id),
----	PRIMARY KEY(user_id1,user_id2)
----);
----CREATE TABLE Message_Premium (
----    user_id1 INT,
----    user_id2 INT,
----    [text] VARCHAR(Max),
----	CreatedDate DATETIME DEFAULT GETDATE(),
----    FOREIGN KEY (user_id1) REFERENCES Premium(user_id),
----    FOREIGN KEY (user_id2) REFERENCES Premium(user_id),
----    PRIMARY KEY (user_id1, user_id2)
----);
----CREATE TABLE follower(
----	user_id1 INT,
----	user_id2 INT,
----  FOREIGN KEY (user_id1) REFERENCES Premium(user_id),
----	FOREIGN KEY (user_id2) REFERENCES Premium(user_id),
----	PRIMARY KEY(user_id1,user_id2)
----);
----CREATE TABLE Comment_Album (
----    user_id INT,                  
----    album_id INT,
----    [text] VARCHAR(MAX),
----    FOREIGN KEY (user_id) REFERENCES Premium(user_id),
----    FOREIGN KEY (album_id) REFERENCES Albums(album_id)ON DELETE CASCADE,
----	PRIMARY KEY(user_id,album_id)
----);
----CREATE TABLE artist_has_song(
----    song_id INT ,
----	artist_id INT ,
----    FOREIGN KEY (song_id) REFERENCES Songs(song_id)ON DELETE CASCADE,
----	FOREIGN KEY (artist_id) REFERENCES Artists(artist_id),
----	PRIMARY KEY(song_id,artist_id)
----);
----CREATE TABLE artist_has_album(
----    album_id INT,
----	artist_id INT ,
----    FOREIGN KEY (album_id) REFERENCES Albums(album_id)ON DELETE CASCADE,
----	FOREIGN KEY (artist_id) REFERENCES Artists(artist_id),
----	PRIMARY KEY(album_id,artist_id)
----);
----CREATE TABLE Playlist_has_song(
----    [name]  VARCHAR(50),
----	song_id INT ,
----	user_id INT ,
----    FOREIGN KEY (user_id,[name]) REFERENCES Play_list(user_id,[name]),
----	FOREIGN KEY (song_id) REFERENCES Songs(song_id)ON DELETE CASCADE,
----	PRIMARY KEY([name],song_id,user_id)
----);
----CREATE TABLE Favorite_Song(
----    user_id INT,
----	song_id INT,
----    FOREIGN KEY (user_id) REFERENCES Premium(user_id),
----	FOREIGN KEY (song_id) REFERENCES Songs(song_id)ON DELETE CASCADE,
----	PRIMARY KEY(user_id,song_id)
----);
----CREATE TABLE Comment_song(
----    song_id INT,
----	[text] VARCHAR(MAX),
----	user_id INT,
----	[date] DATETIME,
----    FOREIGN KEY (user_id) REFERENCES Premium(user_id),
----	FOREIGN KEY (song_id) REFERENCES Songs(song_id)ON DELETE CASCADE,
----	PRIMARY KEY(user_id,song_id,[date])
----);
----CREATE TABLE Like_song(
----    song_id INT ,
----	user_id INT ,
----    FOREIGN KEY (user_id) REFERENCES Premium(user_id),
----	FOREIGN KEY (song_id) REFERENCES Songs(song_id)ON DELETE CASCADE,
----	PRIMARY KEY(user_id,song_id)
----);
----CREATE TABLE Like_album(
----    user_id INT ,
----	album_id INT ,
----    FOREIGN KEY (user_id) REFERENCES Premium(user_id),
----	FOREIGN KEY (album_id) REFERENCES Albums(album_id)ON DELETE CASCADE,
----	PRIMARY KEY(user_id,album_id)

----);
----CREATE TABLE Play_song(
----   song_id INT ,
----	user_id INT ,
----    FOREIGN KEY (user_id) REFERENCES Premium(user_id),
----	FOREIGN KEY (song_id) REFERENCES Songs(song_id)ON DELETE CASCADE,
----	PRIMARY KEY(user_id,song_id)
----);
----CREATE TABLE User_Artist_Likes (
----	user_id INT,
----	artist_id INT,
----	song_id INT ,
----	Likes_Count INT,
----	FOREIGN KEY (song_id) REFERENCES Songs(song_id),
----	FOREIGN KEY (user_id) REFERENCES Premium(user_id),
----	FOREIGN KEY (artist_id) REFERENCES Artists(artist_id),
----	PRIMARY KEY(user_id,song_id)
----);
----CREATE TABLE User_Genre_Likes (
----	user_id INT,
----	song_id INT ,
----	Likes_Count INT,
----	FOREIGN KEY (user_id) REFERENCES Premium(user_id),
----	FOREIGN KEY (song_id) REFERENCES Songs(song_id),
----	PRIMARY KEY(user_id,song_id)
----);
----CREATE TABLE Chat (
----    chat_id INT PRIMARY KEY IDENTITY(1,1),
----    sender_id INT NOT NULL,
----    receiver_id INT NOT NULL,
----    message_content VARCHAR(MAX) NOT NULL,
----    sent_at DATETIME NOT NULL DEFAULT GETDATE(),
----    FOREIGN KEY (sender_id) REFERENCES Users(user_id),
----    FOREIGN KEY (receiver_id) REFERENCES Users(user_id)
----);

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----CREATE PROCEDURE AddFollower
----    @UserId1 INT,
----    @UserId2 INT
----AS
----BEGIN
----    INSERT INTO follower (user_id1, user_id2)
----    VALUES (@UserId1, @UserId2);
----END;
----GO
------DISPLAY ALL FOLLOWER FOR ONE PERSON:
----CREATE PROCEDURE GetFollowers
----    @user_id INT
----AS
----BEGIN
----    SELECT
----        u.user_id,
----        u.username
----    FROM
----        follower f
----    JOIN
----        Users u ON f.user_id1 = u.user_id
----    WHERE
----        f.user_id2 = @user_id;
----END;
----GO
------DISPLAY ALL FOLLOWING FOR ONE PERSON:
----CREATE PROCEDURE GetFollowing
----    @user_id INT
----AS
----BEGIN
----    SELECT
----        u.user_id,
----        u.username
----    FROM
----        follower f
----    JOIN
----        Users u ON f.user_id2 = u.user_id 
----    WHERE
----        f.user_id1 = @user_id;  
----END;
----GO
------ADD Wallet to the User 
----CREATE TRIGGER CreateWalletAfterUserInsert
----ON Users
----AFTER INSERT
----AS
----BEGIN
----    INSERT INTO Digital_wallet (user_id) 
----    SELECT user_id 
----    FROM inserted;
----END;
----GO
----ADD Ticket For evry Concert
--CREATE PROCEDURE AddTicketsForConcert
--    @artist_id INT,
--    @date_concert DATETIME,
--    @price1 DECIMAL(10, 2),
--    @quantity1 INT,
--    @price2 DECIMAL(10, 2),
--    @quantity2 INT,
--    @price3 DECIMAL(10, 2),
--    @quantity3 INT
--AS
--BEGIN
--    DECLARE @i INT = 1;
--    WHILE @i <= @quantity1
--    BEGIN
--        INSERT INTO Tickets (user_id, artist_id, price, date_concert)
--        VALUES (NULL, @artist_id, @price1, @date_concert);
--        SET @i = @i + 1;
--    END

--    SET @i = 1;
--    WHILE @i <= @quantity2
--    BEGIN
--        INSERT INTO Tickets (user_id, artist_id, price, date_concert)
--        VALUES (NULL, @artist_id, @price2, @date_concert);
--        SET @i = @i + 1;
--    END

--    SET @i = 1;
--    WHILE @i <= @quantity3
--    BEGIN
--        INSERT INTO Tickets (user_id, artist_id, price, date_concert)
--        VALUES (NULL, @artist_id, @price3, @date_concert);
--        SET @i = @i + 1;
--    END
--END;
--GO
--SHOW ALL  Available CONCERT:
--SELECT artist_id, location, [date]
--FROM Concerts
--WHERE [date] > GETDATE() and Concerts.cancel!=1;
--SHOW ALL Available Tickets:
--CREATE PROCEDURE GetAvailableTickets
--    @artist_id INT,
--    @date_concert DATETIME
--AS
--BEGIN
--    SELECT ticket_id, price
--    FROM Tickets
--    WHERE artist_id = @artist_id
--      AND date_concert = @date_concert
--      AND is_sold = 0
--      AND Expiration = 0;
--END;
--GO
--BUY TICKET AND UPDATE WALLET
--CREATE PROCEDURE BuyTicket
--    @user_id INT,       
--    @ticket_id INT      
--AS
--BEGIN
--    BEGIN TRANSACTION;

--    DECLARE @price DECIMAL(10, 2);  
--    DECLARE @balance DECIMAL(10, 2); 

--    SELECT @price = price
--    FROM Tickets
--    WHERE ticket_id = @ticket_id
--      AND is_sold = 0
--      AND Expiration = 0;
  
--    SELECT @balance = amount
--    FROM Digital_wallet
--    WHERE user_id = @user_id;

--    IF @balance < @price
--    BEGIN
--        RAISERROR('Insufficient funds in wallet.', 16, 1);
--        ROLLBACK TRANSACTION;
--        RETURN;
--    END;
--    UPDATE Tickets
--    SET user_id = @user_id, is_sold = 1
--    WHERE ticket_id = @ticket_id;

--    UPDATE Digital_wallet
--    SET amount = amount - @price
--    WHERE user_id = @user_id;

--    COMMIT TRANSACTION;
--END;
--GO
--SHOW ALL TICKET THAT BUY(0)
--CREATE FUNCTION SHOWALLTICKET0 (@user_id INT)
--RETURNS TABLE
--AS
--RETURN
--(
--    SELECT 
--        t.ticket_id,
--        a.bio AS Artist_information,
--        c.[date] AS concert_date,
--        c.location,
--        t.price
--    FROM 
--        Tickets t
--    JOIN 
--        Concerts c ON t.artist_id = c.artist_id AND t.date_concert = c.[date]
--    JOIN 
--        Artists a ON t.artist_id = a.artist_id
--    WHERE 
--        t.user_id = @user_id AND t.is_sold = 1 AND t.Expiration = 0 AND t.date_concert>GETDATE() 
--);
----SHOW ALL TICKET THAT BUY(1):
--CREATE FUNCTION SHOWALLTICKET1 (@user_id INT)
--RETURNS TABLE
--AS
--RETURN
--(
--    SELECT 
--        t.ticket_id,
--        a.bio AS Artist_information,
--        c.[date] AS concert_date,
--        c.location,
--        t.price
--    FROM 
--        Tickets t
--    JOIN 
--        Concerts c ON t.artist_id = c.artist_id AND t.date_concert = c.[date]
--    JOIN 
--        Artists a ON t.artist_id = a.artist_id
--    WHERE 
--        t.user_id = @user_id AND t.is_sold = 1 AND t.Expiration = 1 AND t.date_concert<=GETDATE() 
--);
----ADD SONG TO FSVORITE
--CREATE PROCEDURE ToggleFavoriteSong
--@user_id INT,
--@song_id INT
--AS
--BEGIN
---- Check if the song is already a favorite
--IF EXISTS (SELECT 1 FROM Favorite_Song WHERE user_id = @user_id AND song_id = @song_id)
--BEGIN
--	-- If the song is already a favorite, remove it
--	DELETE FROM Favorite_Song 
--	WHERE user_id = @user_id AND song_id = @song_id;
--END
--ELSE
--BEGIN
--	-- If the song is not a favorite, add it
--	INSERT INTO Favorite_Song (user_id, song_id)
--	VALUES (@user_id, @song_id);
--END
--END;
--GO
----DISPLAY FAVORITE SONGS:
--CREATE PROCEDURE GetFavoriteSongs
--    @user_id INT
--AS
--BEGIN
--    SELECT 
--        s.song_id,
--        s.title AS Song_Title
--    FROM 
--        Favorite_Song fs
--    JOIN 
--        Songs s ON fs.song_id = s.song_id
--    WHERE 
--        fs.user_id = @user_id;
--END;
--GO
----ADD PLAY LIST TO FSVORITE
--CREATE PROCEDURE ToggleFavoritePlaylist
--    @user_id_added INT,
--    @user_id_owner INT,
--    @playlist_name VARCHAR(50)
--AS
--BEGIN
--    IF EXISTS (SELECT 1 FROM Favorite_Play_list WHERE user_id_owner = @user_id_owner AND user_id = @user_id_added AND [name] = @playlist_name)
--    BEGIN
--        DELETE FROM Favorite_Play_list 
--        WHERE user_id_owner = @user_id_owner AND user_id = @user_id_added AND [name] = @playlist_name;
--    END
--    ELSE
--    BEGIN
--        INSERT INTO Favorite_Play_list (user_id_owner, user_id, [name])
--        VALUES (@user_id_owner, @user_id_added, @playlist_name);
--    END
--END;
--GO
----DISPLAY  PLAY LIST  FAVORITE:
--CREATE PROCEDURE GetFavoritePlaylistsByUserID
--    @UserID INT
--AS
--BEGIN
--    SELECT
--        u.username AS OwnerUsername,  
--        fp.[name] AS PlaylistName
--    FROM
--        Favorite_Play_list fp
--    JOIN
--        Users u ON fp.user_id_owner = u.user_id
--    WHERE
--        fp.user_id = @UserID;
--END;
--GO
--CREATE PROCEDURE SearchMusicAndAlbum
--    @name NVARCHAR(100) = NULL,
--    @artist_name NVARCHAR(100) = NULL,
--    @genre NVARCHAR(50) = NULL,
--    @country NVARCHAR(50) = NULL,
--    @age_category CHAR(2) = NULL
--AS
--BEGIN
--    DECLARE @sql NVARCHAR(MAX) = '';
    
--    -- Base SELECT statement for Songs
--    SET @sql = '
--        SELECT ''Song'' AS Type, s.song_id AS ID, s.title AS Title
--        FROM Songs s
--        JOIN Artists ar ON s.artist_id_added = ar.artist_id
--        WHERE 1=1';
    
--    -- Append conditions for Songs
--    IF @name IS NOT NULL
--        SET @sql = @sql + ' AND s.title LIKE ''%' + @name + '%''';
--    IF @artist_name IS NOT NULL
--        SET @sql = @sql + ' AND ar.bio LIKE ''%' + @artist_name + '%''';
--    IF @genre IS NOT NULL
--        SET @sql = @sql + ' AND s.genre LIKE ''%' + @genre + '%''';
--    IF @country IS NOT NULL
--        SET @sql = @sql + ' AND s.country LIKE ''%' + @country + '%''';
--    IF @age_category IS NOT NULL
--        SET @sql = @sql + ' AND s.Age_category = ''' + @age_category + '''';
    
--    -- Add UNION ALL for Albums
--    SET @sql = @sql + '
--        UNION ALL
--        SELECT ''Album'' AS Type, a.album_id AS ID, a.title AS Title
--        FROM Albums a
--        JOIN Artists ar ON a.artist_id_added = ar.artist_id
--        WHERE 1=1';
    
--    -- Append conditions for Albums
--    IF @name IS NOT NULL
--        SET @sql = @sql + ' AND a.title LIKE ''%' + @name + '%''';
--    IF @artist_name IS NOT NULL
--        SET @sql = @sql + ' AND ar.bio LIKE ''%' + @artist_name + '%''';
--    IF @genre IS NOT NULL
--        SET @sql = @sql + ' AND a.genre LIKE ''%' + @genre + '%''';
--    IF @country IS NOT NULL
--        SET @sql = @sql + ' AND a.country LIKE ''%' + @country + '%''';
--    IF @age_category IS NOT NULL
--        SET @sql = @sql + ' AND a.Age_category = ''' + @age_category + '''';
    
--    -- Execute the dynamic SQL
--    EXEC sp_executesql @sql;
--END;
--GO
----DISPLAY SONG DETAILS:
--CREATE PROCEDURE GetSongDetails
--    @song_id INT
--AS
--BEGIN
--    -- Get the song details along with the artist's username
--    SELECT
--        s.song_id AS ID,
--        s.title AS Title,
--        a.title AS AlbumTitle,
--        u.username AS ArtistName,  -- Retrieve the artist's username
--        s.genre AS Genre,
--        s.country AS Country,
--        s.Age_category AS AgeCategory,
--        s.lyrics AS Lyrics,
--        s.address_of_picture AS PictureAddress
--    FROM Songs s
--    LEFT JOIN Albums a ON s.album_id = a.album_id
--    LEFT JOIN Artists ar ON s.artist_id_added = ar.artist_id
--    LEFT JOIN Users u ON ar.artist_id = u.user_id  -- Assuming Artists table has a column user_id referring to Users table
--    WHERE s.song_id = @song_id;
--END;
--GO
